issue_name,issue_description,issue_remediation,issue_severity,issue_dynamic_desc,findings,bug_hash,bug_id,bug_status,comment,audit_type
ARRAY LENGTH CACHING,"During each iteration of the loop, reading the length of the array uses more gas than is necessary. In the most favorable scenario, in which the length is read from a memory variable, storing the array length in the stack can save about 3 gas per iteration. In the least favorable scenario, in which external calls are made during each iteration, the amount of gas wasted can be significant.
The following array was detected to be used inside loop without caching it's value in memory: recipients.",Consider storing the array length of the variable before the loop and use the stored length instead of fetching it in each iteration.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [967], 'line_nos_start': [963]}]",7Rxa8Whqm4Y_RuV7bhiUetSN6j4=,SSB_4236989_32,pending_fix,,automated
AVOID RE-STORING VALUES,"The function is found to be allowing re-storing the value in the contract's state variable even when the old value is equal to the new value. This practice results in unnecessary gas consumption due to the Gsreset operation (2900 gas), which could be avoided. If the old value and the new value are the same, not updating the storage would avoid this cost and could instead incur a Gcoldsload (2100 gas) or a Gwarmaccess (100 gas), potentially saving gas.","To optimize gas usage, add a check to compare the old value with the new value before updating the storage. Only perform the storage update if the new value is different from the old value. This approach will prevent unnecessary storage writes and reduce gas consumption.",gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [720], 'line_nos_start': [716]}]",Jwnd16hs522Kw-TayiR3mgHvG7Y=,SSB_4236989_23,pending_fix,,automated
AVOID RE-STORING VALUES,"The function is found to be allowing re-storing the value in the contract's state variable even when the old value is equal to the new value. This practice results in unnecessary gas consumption due to the Gsreset operation (2900 gas), which could be avoided. If the old value and the new value are the same, not updating the storage would avoid this cost and could instead incur a Gcoldsload (2100 gas) or a Gwarmaccess (100 gas), potentially saving gas.","To optimize gas usage, add a check to compare the old value with the new value before updating the storage. Only perform the storage update if the new value is different from the old value. This approach will prevent unnecessary storage writes and reduce gas consumption.",gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [720], 'line_nos_start': [716]}]",Jwnd16hs522Kw-TayiR3mgHvG7Y=,SSB_4236989_23,pending_fix,,automated
AVOID ZERO-TO-ONE STORAGE WRITES,"
Writing a storage variable from zero to a non-zero value costs 22,100 gas (20,000 for the write and 2,100 for cold access), making it one of the most expensive operations. This is why patterns like OpenZeppelin’s ReentrancyGuard use 1 and 2 instead of 0 and 1—to avoid the high cost of zero-to-non-zero writes. Non-zero to non-zero updates cost only 5,000 gas.

","To mitigate this gas inefficiency, consider initializing storage variables to non-zero values during contract deployment if possible. Alternatively, design contract logic to minimize the number of times storage variables are set from zero to non-zero values. This can be achieved by setting default non-zero values where applicable or by batching storage updates to reduce the frequency of costly initializations.",gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [933], 'line_nos_start': [933]}]",9onxfx1XEbnQfjhHxNIucHTNFbs=,SSB_4236989_3,pending_fix,,automated
BLOCK VALUES AS A PROXY FOR TIME,,,informational,,[],mUPLqDh-ACJgZiXoPTDps1c7A90=,SSB_4236989_58,pending_fix,,automated
BLOCK VALUES AS A PROXY FOR TIME,,,informational,,[],mUPLqDh-ACJgZiXoPTDps1c7A90=,SSB_4236989_58,pending_fix,,automated
CHEAPER INEQUALITIES IN IF(),"The contract was found to be doing comparisons using inequalities inside the if statement.When inside the if statements, non-strict inequalities (>=, <=) are usually cheaper than the strict equalities (>, <)."," It is recommended to go through the code logic, and, if possible, modify the strict inequalities with the non-strict ones to save ~3 gas as long as the logic of the code is not affected.",gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [610], 'line_nos_start': [610]}]",4w6nIkHZEVU6Len6PeAhDp6923E=,SSB_4236989_59,pending_fix,,automated
CHEAPER INEQUALITIES IN REQUIRE(),"The contract was found to be performing comparisons using inequalities inside the require statement. When inside the require statements, non-strict inequalities (>=, <=) are usually costlier than strict equalities (>, <).","It is recommended to go through the code logic, and, if possible, modify the non-strict inequalities with the strict ones to save ~3 gas as long as the logic of the code is not affected.",gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [961], 'line_nos_start': [961]}]",-dS8hLX5vYui0TY3Cs65tARieIQ=,SSB_4236989_61,pending_fix,,automated
CHEAPER INEQUALITIES IN REQUIRE(),"The contract was found to be performing comparisons using inequalities inside the require statement. When inside the require statements, non-strict inequalities (>=, <=) are usually costlier than strict equalities (>, <).","It is recommended to go through the code logic, and, if possible, modify the non-strict inequalities with the strict ones to save ~3 gas as long as the logic of the code is not affected.",gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [961], 'line_nos_start': [961]}]",-dS8hLX5vYui0TY3Cs65tARieIQ=,SSB_4236989_61,pending_fix,,automated
CONSTRUCTORS SHOULD EMIT AN EVENT,,,informational,,[],UFnkYTej4hlAaAF6rrMFv7r84cs=,SSB_4236989_37,pending_fix,,automated
CONSTRUCTORS SHOULD EMIT AN EVENT,,,informational,,[],UFnkYTej4hlAaAF6rrMFv7r84cs=,SSB_4236989_37,pending_fix,,automated
CONSTRUCTORS SHOULD EMIT AN EVENT,,,informational,,[],UFnkYTej4hlAaAF6rrMFv7r84cs=,SSB_4236989_37,pending_fix,,automated
CONTRACT NAME SHOULD USE PASCALCASE,,,informational,,[],yxdVoMJLONOFAOEREYY4mz43o4E=,SSB_4236989_62,pending_fix,,automated
DEFAULT INT VALUES ARE MANUALLY RESET,"The contract is found to inefficiently reset integer variables to their default value of zero using manual assignment. In Solidity, manually setting a variable to its default value does not free up storage space, leading to unnecessary gas consumption. Instead, using the .delete keyword can achieve the same result while also freeing up storage space on the Ethereum blockchain, resulting in gas cost savings.","To optimize gas usage, replace manual resets of integer variables with the .delete keyword. This not only sets the variable to its default value but also frees up storage space, leading to reduced gas costs.",gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [985], 'line_nos_start': [985]}]",d6asU_Hu0CSpcYmbELlMuNIYcCU=,SSB_4236989_31,pending_fix,,automated
DEFAULT INT VALUES ARE MANUALLY RESET,"The contract is found to inefficiently reset integer variables to their default value of zero using manual assignment. In Solidity, manually setting a variable to its default value does not free up storage space, leading to unnecessary gas consumption. Instead, using the .delete keyword can achieve the same result while also freeing up storage space on the Ethereum blockchain, resulting in gas cost savings.","To optimize gas usage, replace manual resets of integer variables with the .delete keyword. This not only sets the variable to its default value but also frees up storage space, leading to reduced gas costs.",gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [985], 'line_nos_start': [985]}]",d6asU_Hu0CSpcYmbELlMuNIYcCU=,SSB_4236989_31,pending_fix,,automated
DEFAULT INT VALUES ARE MANUALLY RESET,"The contract is found to inefficiently reset integer variables to their default value of zero using manual assignment. In Solidity, manually setting a variable to its default value does not free up storage space, leading to unnecessary gas consumption. Instead, using the .delete keyword can achieve the same result while also freeing up storage space on the Ethereum blockchain, resulting in gas cost savings.","To optimize gas usage, replace manual resets of integer variables with the .delete keyword. This not only sets the variable to its default value but also frees up storage space, leading to reduced gas costs.",gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [985], 'line_nos_start': [985]}]",d6asU_Hu0CSpcYmbELlMuNIYcCU=,SSB_4236989_31,pending_fix,,automated
DEFINE CONSTRUCTOR AS PAYABLE,"Developers can save around 10 opcodes and some gas if the constructors are defined as payable.

However, it should be noted that it comes with risks because payable constructors can accept ETH during deployment.",It is suggested to mark the constructors as payable to save some gas. Make sure it does not lead to any adverse effects in case an upgrade pattern is involved.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [935], 'line_nos_start': [932]}]",3Qexjjz7MGWFAfZ6CwMr_AhCt0o=,SSB_4236989_5,pending_fix,,automated
APPROVE FRONT-RUNNING ATTACK,,,high,,[],307XSuXyuUiK-mSQFFwVtZBhdyk=,SSB_4236989_47,pending_fix,,automated
APPROVE FRONT-RUNNING ATTACK,,,high,,[],307XSuXyuUiK-mSQFFwVtZBhdyk=,SSB_4236989_47,pending_fix,,automated
APPROVE FRONT-RUNNING ATTACK,,,high,,[],307XSuXyuUiK-mSQFFwVtZBhdyk=,SSB_4236989_47,pending_fix,,automated
USE OF FLOATING PRAGMA,,,low,,[],QAnDfxMeiILJVPKIH6d2NDLqxQc=,SSB_4236989_21,pending_fix,,automated
USE OF FLOATING PRAGMA,,,low,,[],QAnDfxMeiILJVPKIH6d2NDLqxQc=,SSB_4236989_21,pending_fix,,automated
USE OF FLOATING PRAGMA,,,low,,[],QAnDfxMeiILJVPKIH6d2NDLqxQc=,SSB_4236989_21,pending_fix,,automated
USE OF FLOATING PRAGMA,,,low,,[],QAnDfxMeiILJVPKIH6d2NDLqxQc=,SSB_4236989_21,pending_fix,,automated
USE OF FLOATING PRAGMA,,,low,,[],QAnDfxMeiILJVPKIH6d2NDLqxQc=,SSB_4236989_21,pending_fix,,automated
USE OF FLOATING PRAGMA,,,low,,[],QAnDfxMeiILJVPKIH6d2NDLqxQc=,SSB_4236989_21,pending_fix,,automated
USE OF FLOATING PRAGMA,,,low,,[],QAnDfxMeiILJVPKIH6d2NDLqxQc=,SSB_4236989_21,pending_fix,,automated
USE OF FLOATING PRAGMA,,,low,,[],QAnDfxMeiILJVPKIH6d2NDLqxQc=,SSB_4236989_21,pending_fix,,automated
USE OF FLOATING PRAGMA,,,low,,[],QAnDfxMeiILJVPKIH6d2NDLqxQc=,SSB_4236989_21,pending_fix,,automated
USE OF FLOATING PRAGMA,,,low,,[],QAnDfxMeiILJVPKIH6d2NDLqxQc=,SSB_4236989_21,pending_fix,,automated
FUNCTIONS CAN BE IN-LINED,The internal function  was called only once throughout the contract. Internal functions cost more gas due to additional JUMP instructions and stack operations.,Creating a function for a single call is not necessary if it can be in-lined. It is recommended to implement the logic using in-line codes to save gas.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [827], 'line_nos_start': [824]}]",gk70hfMnEdyYANb7NK1kZezDd0I=,SSB_4236989_44,pending_fix,,automated
FUNCTIONS CAN BE IN-LINED,The internal function  was called only once throughout the contract. Internal functions cost more gas due to additional JUMP instructions and stack operations.,Creating a function for a single call is not necessary if it can be in-lined. It is recommended to implement the logic using in-line codes to save gas.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [827], 'line_nos_start': [824]}]",gk70hfMnEdyYANb7NK1kZezDd0I=,SSB_4236989_44,pending_fix,,automated
FUNCTIONS CAN BE IN-LINED,The internal function  was called only once throughout the contract. Internal functions cost more gas due to additional JUMP instructions and stack operations.,Creating a function for a single call is not necessary if it can be in-lined. It is recommended to implement the logic using in-line codes to save gas.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [827], 'line_nos_start': [824]}]",gk70hfMnEdyYANb7NK1kZezDd0I=,SSB_4236989_44,pending_fix,,automated
FUNCTIONS CAN BE IN-LINED,The internal function  was called only once throughout the contract. Internal functions cost more gas due to additional JUMP instructions and stack operations.,Creating a function for a single call is not necessary if it can be in-lined. It is recommended to implement the logic using in-line codes to save gas.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [827], 'line_nos_start': [824]}]",gk70hfMnEdyYANb7NK1kZezDd0I=,SSB_4236989_44,pending_fix,,automated
FUNCTIONS CAN BE IN-LINED,The internal function  was called only once throughout the contract. Internal functions cost more gas due to additional JUMP instructions and stack operations.,Creating a function for a single call is not necessary if it can be in-lined. It is recommended to implement the logic using in-line codes to save gas.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [827], 'line_nos_start': [824]}]",gk70hfMnEdyYANb7NK1kZezDd0I=,SSB_4236989_44,pending_fix,,automated
FUNCTIONS CAN BE IN-LINED,The internal function  was called only once throughout the contract. Internal functions cost more gas due to additional JUMP instructions and stack operations.,Creating a function for a single call is not necessary if it can be in-lined. It is recommended to implement the logic using in-line codes to save gas.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [827], 'line_nos_start': [824]}]",gk70hfMnEdyYANb7NK1kZezDd0I=,SSB_4236989_44,pending_fix,,automated
FUNCTIONS CAN BE IN-LINED,The internal function  was called only once throughout the contract. Internal functions cost more gas due to additional JUMP instructions and stack operations.,Creating a function for a single call is not necessary if it can be in-lined. It is recommended to implement the logic using in-line codes to save gas.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [827], 'line_nos_start': [824]}]",gk70hfMnEdyYANb7NK1kZezDd0I=,SSB_4236989_44,pending_fix,,automated
REVERTING FUNCTIONS CAN BE PAYABLE,"If a function modifier such as onlyOwner is used, the function will revert if a normal user tries to pay the function. Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.","In the above code, the onlyOwner modifier ensures that only the contract owner can execute the setTimedBlacklist. If a normal user attempts to call this function, the transaction will automatically revert. By marking the setTimedBlacklist as payable, we can optimize gas costs for legitimate callers since the compiler will skip the checks for payment.",gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [992], 'line_nos_start': [983]}]",Up1d3whJBAk9h2YaWwPVRCSBGE0=,SSB_4236989_56,pending_fix,,automated
REVERTING FUNCTIONS CAN BE PAYABLE,"If a function modifier such as onlyOwner is used, the function will revert if a normal user tries to pay the function. Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.","In the above code, the onlyOwner modifier ensures that only the contract owner can execute the setTimedBlacklist. If a normal user attempts to call this function, the transaction will automatically revert. By marking the setTimedBlacklist as payable, we can optimize gas costs for legitimate callers since the compiler will skip the checks for payment.",gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [992], 'line_nos_start': [983]}]",Up1d3whJBAk9h2YaWwPVRCSBGE0=,SSB_4236989_56,pending_fix,,automated
REVERTING FUNCTIONS CAN BE PAYABLE,"If a function modifier such as onlyOwner is used, the function will revert if a normal user tries to pay the function. Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.","In the above code, the onlyOwner modifier ensures that only the contract owner can execute the setTimedBlacklist. If a normal user attempts to call this function, the transaction will automatically revert. By marking the setTimedBlacklist as payable, we can optimize gas costs for legitimate callers since the compiler will skip the checks for payment.",gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [992], 'line_nos_start': [983]}]",Up1d3whJBAk9h2YaWwPVRCSBGE0=,SSB_4236989_56,pending_fix,,automated
REVERTING FUNCTIONS CAN BE PAYABLE,"If a function modifier such as onlyOwner is used, the function will revert if a normal user tries to pay the function. Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.","In the above code, the onlyOwner modifier ensures that only the contract owner can execute the setTimedBlacklist. If a normal user attempts to call this function, the transaction will automatically revert. By marking the setTimedBlacklist as payable, we can optimize gas costs for legitimate callers since the compiler will skip the checks for payment.",gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [992], 'line_nos_start': [983]}]",Up1d3whJBAk9h2YaWwPVRCSBGE0=,SSB_4236989_56,pending_fix,,automated
REVERTING FUNCTIONS CAN BE PAYABLE,"If a function modifier such as onlyOwner is used, the function will revert if a normal user tries to pay the function. Marking the function as payable will lower the gas cost for legitimate callers because the compiler will not include checks for whether a payment was provided.","In the above code, the onlyOwner modifier ensures that only the contract owner can execute the setTimedBlacklist. If a normal user attempts to call this function, the transaction will automatically revert. By marking the setTimedBlacklist as payable, we can optimize gas costs for legitimate callers since the compiler will skip the checks for payment.",gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [992], 'line_nos_start': [983]}]",Up1d3whJBAk9h2YaWwPVRCSBGE0=,SSB_4236989_56,pending_fix,,automated
GAS OPTIMIZATION IN INCREMENTS,"++i costs less gas compared to i++ or i += 1 for unsigned integers.
In i++, the compiler has to create a temporary variable to store the initial value. This is not the case with ++i in which the value is directly incremented and returned, thus, making it a cheaper alternative.","Consider changing the post-increments (i++) to pre-increments (++i) as long as the value is not used in any calculations or inside returns. Make sure that the logic of the code is not changed.

",gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [963], 'line_nos_start': [963]}]",zV4zBoEF8AMxIPamcLrt74Bm05A=,SSB_4236989_49,pending_fix,,automated
IF-STATEMENT REFACTORING,,,informational,,[],ibhIxPYoN9rSLuhobA44mzfOELw=,SSB_4236989_63,pending_fix,,automated
INTERFACES SHOULD BE DECLARED IN A SEPARATE FILE,,,informational,,[],3jLjnrFXh6Af_bvDZlVSqxUkMHI=,SSB_4236989_27,pending_fix,,automated
INTERFACES SHOULD BE DECLARED IN A SEPARATE FILE,,,informational,,[],3jLjnrFXh6Af_bvDZlVSqxUkMHI=,SSB_4236989_27,pending_fix,,automated
INTERFACES SHOULD BE DECLARED IN A SEPARATE FILE,,,informational,,[],3jLjnrFXh6Af_bvDZlVSqxUkMHI=,SSB_4236989_27,pending_fix,,automated
INTERNAL FUNCTIONS NEVER USED,"The contract declared internal functions but was not using them in any of the functions or contracts.Since internal functions can only be called from inside the contracts, it makes no sense to have them if they are not used. This uses up gas and causes issues for auditors when understanding the contract logic.",Having dead code in the contracts uses up unnecessary gas and increases the complexity of the overall smart contract. It is recommended to remove the internal functions from the contracts if they are never used.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [907], 'line_nos_start': [905]}]",VXjU4KaHGFqGMjq9wi-2VRraTYw=,SSB_4236989_8,pending_fix,,automated
INTERNAL FUNCTIONS NEVER USED,"The contract declared internal functions but was not using them in any of the functions or contracts.Since internal functions can only be called from inside the contracts, it makes no sense to have them if they are not used. This uses up gas and causes issues for auditors when understanding the contract logic.",Having dead code in the contracts uses up unnecessary gas and increases the complexity of the overall smart contract. It is recommended to remove the internal functions from the contracts if they are never used.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [907], 'line_nos_start': [905]}]",VXjU4KaHGFqGMjq9wi-2VRraTYw=,SSB_4236989_8,pending_fix,,automated
INTERNAL FUNCTIONS NEVER USED,"The contract declared internal functions but was not using them in any of the functions or contracts.Since internal functions can only be called from inside the contracts, it makes no sense to have them if they are not used. This uses up gas and causes issues for auditors when understanding the contract logic.",Having dead code in the contracts uses up unnecessary gas and increases the complexity of the overall smart contract. It is recommended to remove the internal functions from the contracts if they are never used.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [907], 'line_nos_start': [905]}]",VXjU4KaHGFqGMjq9wi-2VRraTYw=,SSB_4236989_8,pending_fix,,automated
MISSING EVENTS,,,low,,[],BD8zMxtuVjsKYj6WI5HLMvX3E2k=,SSB_4236989_17,pending_fix,,automated
MISSING EVENTS,,,low,,[],BD8zMxtuVjsKYj6WI5HLMvX3E2k=,SSB_4236989_17,pending_fix,,automated
MISSING ZERO ADDRESS VALIDATION,,,low,,[],jX189URH9C3iCo8m0QALotlQOfk=,SSB_4236989_15,pending_fix,,automated
MISSING ZERO ADDRESS VALIDATION,,,low,,[],jX189URH9C3iCo8m0QALotlQOfk=,SSB_4236989_15,pending_fix,,automated
MISSING ZERO ADDRESS VALIDATION,,,low,,[],jX189URH9C3iCo8m0QALotlQOfk=,SSB_4236989_15,pending_fix,,automated
MODIFIER CREATED BUT NEVER USED,,,informational,,[],BYSWGlr0-T6r903dnDD8a9LNjEI=,SSB_4236989_24,pending_fix,,automated
MODIFIER SIDE EFFECTS,,,medium,,[],gXqKSQe_w0unEEHiqzn-rS357sY=,SSB_4236989_4,pending_fix,,automated
NAME MAPPING PARAMETERS,,,informational,,[],VEPgDREVEi2uvHZhu7JJY0Yb-CY=,SSB_4236989_48,pending_fix,,automated
OPTIMIZING ADDRESS ID MAPPING,"Combining multiple address/ID mappings into a single mapping using a struct enhances storage efficiency, simplifies code, and reduces gas costs, resulting in a more streamlined and cost-effective smart contract design.
It saves storage slot for the mapping and depending on the circumstances and sizes of types, it can avoid a Gsset (20000 gas) per mapping combined. Reads and subsequent writes can also be cheaper when a function requires both values and they fit in the same storage slot.",It is suggested to modify the code so that multiple mappings using the address->id parameter are combined into a struct.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [340], 'line_nos_start': [340]}]",duxoU7_sp_Ut1ha6_qyRtCd9K-0=,SSB_4236989_2,pending_fix,,automated
OPTIMIZING ADDRESS ID MAPPING,"Combining multiple address/ID mappings into a single mapping using a struct enhances storage efficiency, simplifies code, and reduces gas costs, resulting in a more streamlined and cost-effective smart contract design.
It saves storage slot for the mapping and depending on the circumstances and sizes of types, it can avoid a Gsset (20000 gas) per mapping combined. Reads and subsequent writes can also be cheaper when a function requires both values and they fit in the same storage slot.",It is suggested to modify the code so that multiple mappings using the address->id parameter are combined into a struct.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [340], 'line_nos_start': [340]}]",duxoU7_sp_Ut1ha6_qyRtCd9K-0=,SSB_4236989_2,pending_fix,,automated
OUTDATED COMPILER VERSION,,,low,,[],7PQynqogUoDViOpqt_EBktTlnis=,SSB_4236989_51,pending_fix,,automated
OUTDATED COMPILER VERSION,,,low,,[],7PQynqogUoDViOpqt_EBktTlnis=,SSB_4236989_51,pending_fix,,automated
OUTDATED COMPILER VERSION,,,low,,[],7PQynqogUoDViOpqt_EBktTlnis=,SSB_4236989_51,pending_fix,,automated
OUTDATED COMPILER VERSION,,,low,,[],7PQynqogUoDViOpqt_EBktTlnis=,SSB_4236989_51,pending_fix,,automated
OUTDATED COMPILER VERSION,,,low,,[],7PQynqogUoDViOpqt_EBktTlnis=,SSB_4236989_51,pending_fix,,automated
OUTDATED COMPILER VERSION,,,low,,[],7PQynqogUoDViOpqt_EBktTlnis=,SSB_4236989_51,pending_fix,,automated
OUTDATED COMPILER VERSION,,,low,,[],7PQynqogUoDViOpqt_EBktTlnis=,SSB_4236989_51,pending_fix,,automated
OUTDATED COMPILER VERSION,,,low,,[],7PQynqogUoDViOpqt_EBktTlnis=,SSB_4236989_51,pending_fix,,automated
REVERT STATEMENTS WITHIN EXTERNAL AND PUBLIC FUNCTIONS CAN BE USED TO PERFORM DOS ATTACKS,,,informational,,[],if0zNfCKSWPmz3up76vtBBPRmoI=,SSB_4236989_34,pending_fix,,automated
STORAGE VARIABLE CACHING IN MEMORY,"The contract HelioCoin is using the state variable blacklistUntil multiple times in the function setTimedBlacklist.
SLOADs are expensive (100 gas after the 1st one) compared to MLOAD/MSTORE (3 gas each).",Storage variables read multiple times inside a function should instead be cached in the memory the first time (costing 1 SLOAD) and then read from this cache to avoid multiple SLOADs.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [992], 'line_nos_start': [983]}]",GoQRi71J-weZ9ENlGV20OmlBGUk=,SSB_4236989_12,pending_fix,,automated
STORAGE VARIABLE CACHING IN MEMORY,"The contract HelioCoin is using the state variable blacklistUntil multiple times in the function setTimedBlacklist.
SLOADs are expensive (100 gas after the 1st one) compared to MLOAD/MSTORE (3 gas each).",Storage variables read multiple times inside a function should instead be cached in the memory the first time (costing 1 SLOAD) and then read from this cache to avoid multiple SLOADs.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [992], 'line_nos_start': [983]}]",GoQRi71J-weZ9ENlGV20OmlBGUk=,SSB_4236989_12,pending_fix,,automated
STORAGE VARIABLE CACHING IN MEMORY,"The contract HelioCoin is using the state variable blacklistUntil multiple times in the function setTimedBlacklist.
SLOADs are expensive (100 gas after the 1st one) compared to MLOAD/MSTORE (3 gas each).",Storage variables read multiple times inside a function should instead be cached in the memory the first time (costing 1 SLOAD) and then read from this cache to avoid multiple SLOADs.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [992], 'line_nos_start': [983]}]",GoQRi71J-weZ9ENlGV20OmlBGUk=,SSB_4236989_12,pending_fix,,automated
STORAGE VARIABLE CACHING IN MEMORY,"The contract HelioCoin is using the state variable blacklistUntil multiple times in the function setTimedBlacklist.
SLOADs are expensive (100 gas after the 1st one) compared to MLOAD/MSTORE (3 gas each).",Storage variables read multiple times inside a function should instead be cached in the memory the first time (costing 1 SLOAD) and then read from this cache to avoid multiple SLOADs.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [992], 'line_nos_start': [983]}]",GoQRi71J-weZ9ENlGV20OmlBGUk=,SSB_4236989_12,pending_fix,,automated
UNCHECKED TRANSFER,,,high,,[],HEf05G-iw0jJz2RwPZSlFQh50fc=,SSB_4236989_28,pending_fix,,automated
UNNECESSARY CHECKED ARITHMETIC IN LOOP,"Increments inside a loop could never overflow due to the fact that the transaction will run out of gas before the variable reaches its limits. Therefore, it makes no sense to have checked arithmetic in such a place.",It is recommended to have the increment value inside the unchecked block to save some gas.,gas,,"[{'file_path': 'contract.sol', 'line_nos_end': [963], 'line_nos_start': [963]}]",OvhMcpMQUuDSoSnnkiloADnMz_A=,SSB_4236989_33,pending_fix,,automated
USE OWNABLE2STEP,,,low,,[],mY1PY8pdr9aBjPmZ5lWoxOQ_jHQ=,SSB_4236989_64,pending_fix,,automated
USE SCIENTIFIC NOTATION,,,informational,,[],kxhIbfA8MkyPp4nuDQM064oqD8o=,SSB_4236989_9,pending_fix,,automated
IS SOURCE CODE VERIFIED,"Source code verification provides transparency for users interacting with smart contracts. Block explorers validate the compiled code with the one on the blockchain. This also gives users a chance to audit the contracts, ensuring that the deployed code matches the intended functionality and minimizing the risk of malicious or erroneous contracts.","Prioritize transparency and trust in smart contract deployment by providing users with access to the verified source code through reputable platforms like Etherscan or BscScan. Additionally, consider using tools such as Truffle or Hardhat to automate the verification process during development and deployment, ensuring that the compiled code matches the original source code. Regularly update and verify the source code to maintain transparency and user confidence in the smart contract ecosystem.",Beneficial,Contract’s source code is verified.,[],,,,,automated
PRESENCE OF MINTING FUNCTION,"Minting functions are often utilized to generate new tokens, which can be allocated to specific addresses, such as user wallets or the contract owner's wallet. This feature is commonly employed in various decentralized finance (DeFi) and non-fungible token (NFT) projects to facilitate token issuance and distribution. The Presence of Minting Function module is designed to quickly identify the presence and implementation of minting functions in a smart contract. Mint functions play a crucial role in creating new tokens and transferring them to the designated user's or owner's wallet. This process significantly contributes to increasing the overall circulation of the tokens within the ecosystem.","It is important to ensure the minting function includes proper access control mechanisms to restrict token minting to authorized addresses only, thereby preventing unauthorized or excessive token creation.",Moderate Risk,The contract can mint new tokens.,"[{'file_path': 'contract.sol', 'line_nos_end': [943], 'line_nos_start': [940]}]",xbd_y2FNzxCmDcxrG4-dP33ENvk=,,,,automated
PRESENCE OF BURN FUNCTION,"The token contract incorporates a burn function that enables the intentional reduction of token amounts, consequently diminishing the total supply. The execution of this burn function contributes to the creation of scarcity within the token ecosystem, as the overall availability of the token decreases.",Consider adding access control modifiers to the burn function to prevent another user from burning their tokens.,Moderate Risk,The tokens can be burned in this contract.,"[{'file_path': 'contract.sol', 'line_nos_end': [949], 'line_nos_start': [947]}]",ScbQ9G_UItR-I5E73Ss5BHm2N1U=,,,,automated
SOLIDITY PRAGMA VERSION,"The contract should be written using the latest Solidity pragma version as it comes with numerous bug fixes. Utilizing an outdated version exposes the contract to vulnerabilities associated with known issues that have been addressed in subsequent updates. Therefore, it is essential to stay current with the latest Solidity version to ensure the robustness and security of the contract against potential vulnerabilities.",Update the Solidity pragma version to the latest stable version to benefit from the latest bug fixes and security enhancements.,Low Risk,The contract can be compiled with a more recent Solidity version,"[{'file_path': 'contract.sol', 'line_nos_end': [8], 'line_nos_start': [8]}, {'file_path': 'contract.sol', 'line_nos_end': [90], 'line_nos_start': [90]}, {'file_path': 'contract.sol', 'line_nos_end': [118], 'line_nos_start': [118]}, {'file_path': 'contract.sol', 'line_nos_end': [148], 'line_nos_start': [148]}, {'file_path': 'contract.sol', 'line_nos_end': [313], 'line_nos_start': [313]}, {'file_path': 'contract.sol', 'line_nos_end': [626], 'line_nos_start': [626]}, {'file_path': 'contract.sol', 'line_nos_end': [728], 'line_nos_start': [728]}, {'file_path': 'contract.sol', 'line_nos_end': [835], 'line_nos_start': [835]}]",-hk9M13Ej66iogNryzrPbEcYuNE=,,,,automated
PROXY-BASED UPGRADABLE CONTRACT,"The Proxy-Based Upgradable Contract module is dedicated to identifying the presence of upgradeable contracts or proxy patterns within a smart contract. The utilization of upgradeable contracts or proxy patterns enables contract owners to make dynamic changes to various aspects, including functions, token circulation, and distribution, without requiring a complete redeployment of the contract.","Avoid using proxy-based upgradeable patterns and instead deploy new contract versions when upgrades are necessary, ensuring immutability and reducing the risk of unintended changes.",Beneficial,This is not a proxy-based upgradable contract.,[],,,,,automated
OWNERS CANNOT BLACKLIST TOKENS OR USERS,"This module is designed to identify whether the owner of a smart contract has the capability to blacklist specific tokens or users. In a scenario where owners possess the authority to blacklist, all transactions related to the blacklisted entities will be immediately halted. Ownership privileges that include the ability to blacklist tokens or users can be a critical feature in certain use cases, providing the owner with control over potential malicious activities, compliance issues, or other concerns. However, in situations where this authority is abused or misapplied, it can lead to unintended consequences and user dissatisfaction.","Ensure that ownership privileges do not include the ability to blacklist tokens or users, as this feature can lead to centralization concerns and potential misuse. Instead, implement transparent governance mechanisms for handling compliance issues or malicious activities.",Moderate Risk,Owners can blacklist tokens or users.,"[{'file_path': 'contract.sol', 'line_nos_end': [921], 'line_nos_start': [921]}]",j0z4gUmAQbrBnCD2Wg2HJ9PI0aw=,,,,automated
IS ERC-20 TOKEN,"A token is expected to adhere to the established standards of the ERC-20 token specification, encompassing the inclusion of all necessary functions with standardized names and arguments as defined by the ERC-20 standard.","Modify the contract to adhere to the ERC-20 standard by renaming the functions to their standard names and ensuring that they have the correct arguments and functionality as specified by the ERC-20 standard. Additionally, include events for better traceability of token transfers.",No Impact,Is ERC-20 token.,"[{'file_path': 'contract.sol', 'line_nos_end': [13], 'line_nos_start': [13]}, {'file_path': 'contract.sol', 'line_nos_end': [96], 'line_nos_start': [96]}, {'file_path': 'contract.sol', 'line_nos_end': [154], 'line_nos_start': [154]}, {'file_path': 'contract.sol', 'line_nos_end': [337], 'line_nos_start': [337]}, {'file_path': 'contract.sol', 'line_nos_end': [921], 'line_nos_start': [921]}]",oodoURe_rt-G-V_lSGRAIh9n7K4=,,,,automated
PAUSABLE CONTRACTS,"Pausable contracts refer to contracts that can be intentionally halted by their owners, temporarily preventing token holders from engaging in buying or selling activities. This pause mechanism allows contract owners to exert control over the token's functionality, introducing a temporary suspension in trading activities for various reasons such as security concerns, updates, or regulatory compliance adjustments.","Implement the pause() and unpause() functions in your contract and secure them with the onlyOwner modifier. This ensures that only the contract owner has the authority to change the paused state of the contract. Additionally, verify that the owner is correctly set and that the access control mechanisms are thoroughly tested to prevent any unauthorized actions.",Low Risk,This is a Pausable contract.,"[{'file_path': 'contract.sol', 'line_nos_end': [789], 'line_nos_start': [787]}, {'file_path': 'contract.sol', 'line_nos_end': [789], 'line_nos_start': [787]}, {'file_path': 'contract.sol', 'line_nos_end': [796], 'line_nos_start': [794]}, {'file_path': 'contract.sol', 'line_nos_end': [796], 'line_nos_start': [794]}, {'file_path': 'contract.sol', 'line_nos_end': [803], 'line_nos_start': [801]}, {'file_path': 'contract.sol', 'line_nos_end': [803], 'line_nos_start': [801]}, {'file_path': 'contract.sol', 'line_nos_end': [815], 'line_nos_start': [812]}, {'file_path': 'contract.sol', 'line_nos_end': [827], 'line_nos_start': [824]}, {'file_path': 'contract.sol', 'line_nos_end': [973], 'line_nos_start': [971]}, {'file_path': 'contract.sol', 'line_nos_end': [978], 'line_nos_start': [976]}]",jsGtE2ijdQiIRkrd-eDQu5WjME4=,,,,automated
CRITICAL ADMINISTRATIVE FUNCTIONS,"A smart contract within the Web3 ecosystem that incorporates critical administrative functions can potentially compromise the transparency and intended objectives of the contract. It is imperative to conduct a thorough examination of these functions, especially in the realm of Web3 smart contracts. Minimizing administrative functions in a token contract within the Web3 framework can significantly reduce the likelihood of complications and enhance overall efficiency and clarity.",Review and minimize critical administrative functions within the smart contract to only include essential functionalities necessary for contract management and operation.,No Impact,"Critical functions that add, update, or delete owner/admin addresses are not detected.",[],,,,,automated
CONTRACT/TOKEN SELF DESTRUCT,"The SELFDESTRUCT opcode is a critical operation in Ethereum smart contracts, allowing a contract to autonomously terminate itself. When invoked, this opcode deallocates the contract, freeing up storage and computational resources on the Ethereum blockchain. Notably, the remaining Ether in the contract is sent to a specified address, ensuring a responsible handling of funds.","Remove or restrict the use of the selfdestruct function to only be accessible by authorized parties under specific conditions, such as emergency scenarios or contract upgrades, to prevent unintended contract termination and loss of funds. Implement thorough testing and auditing to ensure the secure handling of contract termination functionalities.",No Impact,The contract cannot be self-destructed by owners.,[],,,,,automated
ERC20 RACE CONDITION,"The ERC-20 race condition arises when two or more transactions attempt to interact with the same ERC-20 token contract concurrently. This scenario can result in conflicts and unexpected behavior due to the non-atomic nature of certain operations in the contract. Atomicity refers to the concept that an operation is indivisible and occurs as a single, uninterruptible unit.","Implement locking mechanisms or state variables to ensure that only one transaction can modify the token balances or allowances at a time, thereby preventing the race condition.",Low Risk,The contract is vulnerable to ERC-20 approve Race condition vulnerability.,"[{'file_path': 'contract.sol', 'line_nos_end': [438], 'line_nos_start': [434]}, {'file_path': 'contract.sol', 'line_nos_end': [567], 'line_nos_start': [565]}, {'file_path': 'contract.sol', 'line_nos_end': [618], 'line_nos_start': [608]}]",lC09Tju2QHoAvOEHorPfl9KjvFM=,,,,automated
RENOUNCED OWNERSHIP,"Renounced ownership indicates that the contract is truly decentralized, as the owner has relinquished control, ensuring that the contract's functionality and rules cannot be altered by administrators or any central authority.","If renounced ownership is a desired feature for your smart contract, ensure that the renouncement process is securely implemented and irreversible. Consider providing clear documentation or a statement in the contract's code to inform users and developers that ownership has been renounced, establishing trust in the contract's decentralized nature.",Moderate Risk,The contract's owner was found.,[],,,,,automated
USERS WITH TOKEN BALANCE MORE THAN 20%,"Users with token balances exceeding 5% of the circulating token supply are critical to monitor, as their actions can significantly influence the token's price and ecosystem. Proper token distribution helps maintain a healthy market by preventing concentration of power and promoting fair participation.","To address the issue of users holding more than 5% of the circulating token supply, consider implementing measures such as token vesting schedules or limits on the maximum amount of tokens that can be held by a single address. Additionally, encourage token holders to diversify their portfolios and participate in governance mechanisms to ensure a more decentralized distribution of tokens.",Moderate Risk,Addresses contain more than 20% of circulating token supply.,[],,,,,automated
OVERPOWERED OWNERS,"An overpowered owner risk occurs when a contract has numerous functions that only the owner can execute. This can lead to centralization issues and potential abuse, as the owner has disproportionate control over the contract's operations.","Review and minimize the number of critical functions accessible to owners, ensuring that these functions are necessary for contract management and do not pose undue risk to users' funds in the event of compromise or misuse. Implement multi-signature or governance mechanisms for critical actions to distribute authority and mitigate risk.",Low Risk,The contracts are using functions that can only be called by the owners.,"[{'file_path': 'contract.sol', 'line_nos_end': [699], 'line_nos_start': [697]}, {'file_path': 'contract.sol', 'line_nos_end': [710], 'line_nos_start': [705]}, {'file_path': 'contract.sol', 'line_nos_end': [943], 'line_nos_start': [940]}, {'file_path': 'contract.sol', 'line_nos_end': [968], 'line_nos_start': [955]}, {'file_path': 'contract.sol', 'line_nos_end': [973], 'line_nos_start': [971]}, {'file_path': 'contract.sol', 'line_nos_end': [978], 'line_nos_start': [976]}, {'file_path': 'contract.sol', 'line_nos_end': [992], 'line_nos_start': [983]}]",5T4EJvSXylJmrJf_m4L4AfzihNY=,,,,automated
NO COOLDOWN CODE TO HALT TRADING OR WORKFLOWS FOUND,"Cooldown functions, a crucial aspect in the smart contract landscape, are employed to temporarily suspend trading activities or other contract workflows. The mechanism introduces a time-based delay, effectively preventing users from repeatedly executing transactions or engaging in rapid buying and selling of tokens. Cooldown functions are used to halt trading or other contract workflows for a certain amount of time so as to prevent users from repeatedly executing transactions or buying and selling tokens.",Implement a time-based delay mechanism within the smart contract to prevent users from repeatedly executing transactions or engaging in rapid buying and selling of tokens by enforcing a cooldown period after each transaction.,Beneficial,The contract does not have a cooldown feature.,[],,,,,automated
OWNERS WHITELISTING TOKENS/USERS,"This empowers the contract owner to selectively grant privileges to users, such as exemption from fees or access to unique contract features.","Ensure that the contract owner's ability to whitelist tokens or users is limited to necessary and legitimate use cases, such as granting special privileges or access to specific features, and implement strict access controls to prevent unauthorized whitelisting actions.",Beneficial,Owners cannot whitelist tokens or users.,[],,,,,automated
OWNERS CAN SET/UPDATE FEES,"In the context of smart contracts, fees are essential components that may be associated with various functionalities, such as transactions, token transfers, or other specific actions. The ability for owners to set or update fees is particularly valuable in scenarios where fee adjustments are needed to align with market conditions, regulatory requirements, or project-specific considerations. The Owners Can Set or Update Fees module focuses on identifying the capability within a smart contract for owners to establish or modify fees. This feature allows contract owners to have control over the fee structure within the contract, providing flexibility and adaptability to changing circumstances.","To remove or disable the functions that allow the contract owner to update fees, ensuring that fee structures remain fixed and cannot be altered post-deployment, you would typically need to modify the smart contract code itself. Specifically, you would locate the functions responsible for setting or updating fees and either remove them entirely or modify them to prevent changes.",No Impact,Owners cannot set or update Fees in the contract.,[],,,,,automated
HARDCODED ADDRESSES,"The inclusion of a fixed or hardcoded address within a smart contract has the potential to pose significant challenges in the future, particularly concerning the contract's adaptability and upgradability. This static reference to an address may impede the seamless implementation of updates or modifications to the contract, hindering its ability to evolve in response to changing requirements. Such rigidity may result in complications and obstacles when attempting to enhance or alter the smart contract's functionality over time.","To remediate, consider using configuration variables or function parameters instead of hardcoded addresses to allow for flexibility and easier updates in the future. If a fixed address is necessary, ensure that it is clearly documented and easily modifiable in the contract.",No Impact,Hardcoded addresses were not found.,[],,,,,automated
OWNERS UPDATING TOKEN BALANCE,"The Owners Updating Token Balance module is focused on identifying situations where a smart contract has functions controlled by owners that allow them to update token balances for other users or the contract. If a contract permits owners to manipulate token balances, it can have significant implications on user holdings and overall contract integrity. In some scenarios, contracts may provide owners with functions that enable the manual adjustment of token balances. While this feature can be legitimate for specific use cases, such as token distribution or rewards, it also introduces potential risks. Allowing owners to arbitrarily update token balances may lead to vulnerabilities, manipulation, or unintended changes in the token ecosystem.","Restrict the ability of owners to update token balances to only include necessary and legitimate use cases, such as token distribution or rewards. Implement strict access controls and validation mechanisms to prevent unauthorized or arbitrary changes to token balances.",No Impact,The contract does not have any owner-controlled functions modifying token balances.,[],,,,,automated
OWNER WALLET TOKEN SUPPLY,"A check on the owner's wallet balance exceeding a specific token amount can indicate a centralization risk, where the owner may have disproportionate control over the token supply, potentially leading to manipulation or abuse.","If the owner's wallet contains more than 5% of the circulating token supply, consider implementing measures such as token vesting schedules or limits on the maximum amount of tokens that can be held by a single address. This can help prevent centralization of token ownership and ensure a more decentralized distribution. If the owner's wallet contains less than 5% of the circulating token supply, it may indicate a healthy distribution, but ongoing monitoring is recommended to maintain a balanced token ecosystem.",High Risk,Owner’s wallet contains 978998063.7481164 tokens which is more than 97.9% of the circulating token supply.,[],,,,,automated
FUNCTION RETRIEVING OWNERSHIP,"The Function Retrieving Ownership module serves the purpose of swiftly and efficiently retrieving ownership-related information within a smart contract. This functionality is vital for projects seeking to access and manage ownership data seamlessly. Utilizing this module, developers can streamline the process of obtaining ownership details, contributing to the effective administration of ownership-related functions within the ecosystem.","To enhance the security and management of ownership within the smart contract, it is recommended to introduce an ownership transfer mechanism that securely transfers ownership to another address. Additionally, the relinquishOwnership function should be modified to prevent setting the owner to the zero address, which can lead to the contract being left without an owner. Implementing these changes will ensure that ownership-related functions remain secure and manageable within the ecosystem.",No Impact,No such functions retrieving ownership were found.,[],,,,,automated
IS SPAM CONTRACT,"A spam NFT is an NFT that is considered low-quality or deceptive, cluttering the marketplace and potentially misleading users.","Platforms can mitigate spam NFTs through algorithmic detection, community reporting, manual review, smart contract restrictions, and educational resources.",High Risk,,[],,,,,automated
MALICIOUS TYPECASTING OF ADDRESS,"Malicious typecasting, particularly the conversion of uint160 values to addresses, is a tactic often used by scammers to create deceptive addresses that can bypass standard detection mechanisms, facilitating fraudulent activities.","To mitigate the risk of malicious typecasting of addresses, typecasting of addresses shall be avoided. Ensure that addresses are directly assigned and used in their native format without any intermediary type conversions.",No Impact,Absence of Malicious Typecasting.,[],,,,,automated
LIQUIDITY BURN STATUS,"The liquidity burn status indicates whether the LP tokens for the scanned contract have been permanently removed or remain accessible. If burnt, the LP tokens are sent to an irrecoverable address, ensuring that the liquidity cannot be withdrawn, offering permanent stability and security to the project. If not burnt, the LP tokens could still be accessed and withdrawn, which might expose investors to risks of liquidity manipulation or removal.", It is crucial to lock the liquidity immediately using a trusted liquidity locker service to mitigate risks and protect investor's funds.,Moderate Risk,,[],,,,,automated
LIQUIDITY LOCK STATUS,"The liquidity status determines whether the liquidity for the scanned contract is securely locked or accessible. If locked, LP tokens are stored in a time-locked contract, preventing any withdrawals until the lock expires. This helps protect investors from sudden liquidity removal. If not locked, LP tokens remain accessible, allowing project developers or liquidity providers to withdraw liquidity at any time, potentially posing risks to investors.","f not already locked, consider burning or locking the liquidity to prevent its withdrawal and enhance trust in the project.",Moderate Risk,,[],,,,,automated
TOKEN SUPPLY NOT FIXED,"A fixed supply token is critical when the token's value is tied to scarcity or when precise control over inflation or deflation is required. Without a fixed supply, the contract could introduce unexpected inflation, devalue the token, or erode trust in the token's consistency.","To remediate this issue, ensure that the total supply is assigned a fixed value within the constructor and that no functions within the contract can change this total supply after deployment. Remove or thoroughly secure any minting or burning capabilities to prevent unauthorized changes to the total supply.",No Impact,No such functions having totalSupply function update were found.,[],,,,,automated
GAS ABUSE VIA MALICIOUS MINTING,"Gas abuse refers to patterns within smart contracts that manipulate gas consumption in ways that unnecessarily increase transaction costs for users. This can occur through various mechanisms designed to exploit gas inefficiencies or inflate gas usage, shifting the financial burden onto users without their knowledge.","If the contract involves token minting or refund mechanisms, such as gas token creation, ensure these features are strictly controlled.",No Impact,No such functions having gas abuse via malicious minting.,[],,,,,automated
CODE INJECTION VIA TOKEN NAME,"The token name or symbol contains potentially harmful content, such as HTML tags or JavaScript code. If these unsanitized strings are displayed by user interfaces, they could execute scripts in users' browsers, posing a significant risk of Cross-Site Scripting (XSS).",Use normal strings without any HTML or JavaScript content for token names and symbols.,No Impact,Valid token name or symbol.,[],,,,,automated
OTHER ADDRESSES WITH SPECIAL ACCESS,"Special permissions granted to non-owner addresses allow them to execute specific functions with elevated access. This can introduce security risks, as these privileged addresses may perform critical operations that impact the contract's state or user funds. If not properly managed or monitored, these permissions could lead to unauthorized or malicious actions, compromising the contract's integrity.","Restrict special permissions to only trusted addresses, ideally limiting access to the contract owner or a multi-signature wallet.",No Impact,No such functions having addresses with special access.,[],,,,,automated
NO HIDDEN OWNER,"The Hidden Owner check identifies whether there are any hidden owner roles within the contract. Hidden ownership can allow unauthorized access and control over contract functions, which poses a risk to users and stakeholders.","To ensure contract security and transparency, remove or disclose any hidden ownership roles. Use explicit and well-documented ownership patterns, like OpenZeppelin’s Ownable library, to clearly define and manage ownership, and regularly audit the contract for unauthorized owner permissions.",Beneficial,No hidden owner detected,[],,,,,automated
COUNTERFEIT TOKEN,"The contract is found to have the token symbol identical to that of official tokens, thereby falling under the category of counterfeit tokens. These counterfeit tokens can mislead users into believing they are interacting with legitimate, well-known cryptocurrencies, potentially leading to financial losses and damaging the reputation of the official token.","To avoid falling into the category of counterfeit tokens, it is imperative not to use token symbols or names that are identical or similar to those of established, official tokens. Developers should ensure that their tokens have unique identifiers that do not infringe on the branding of existing, well-known tokens.",Moderate Risk,,[],,,,,automated
EXTERNAL CALL RISK IN CRITICAL FUNCTIONS,"This check identifies risks associated with external calls within critical functions. External calls can introduce vulnerabilities such as unexpected state changes, or dependencies on external contracts, which may compromise the integrity and reliability of the function’s execution.","To mitigate risks associated with external calls in critical functions, consider refactoring functions to limit or isolate external interactions.",No Impact,Absence of external call risk in critical functions.,[],,,,,automated
